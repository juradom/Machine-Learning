summary(fit)
predict(fit, data.frame(x=2),interval="confidence")
predict(fit, data.frame(x=2),interval="confidence", level=.95)
predict(fit, data.frame(x=2),interval="confidence", level=.95, df=30)
confint(fit)
confint(fit,wt)
confint(fit,"wt")
confint(fit,x)
confint(fit,x=2)
confint(fit,x=2)
predict(fit, data.frame(x=2),interval="confidence", level=.95)
summary(fit)
fit <- lm(y~x)
fit
fit <- lm(y~I(x+5)
)
fit
head(fit)
summary(fit)
fit <- lm(y~x)
summary(fit)
fit$coefficients[1]
fit$coefficients[2]
fit$coefficients[2]/fit$coefficients[1]
yhat1 <- fit$coefficients[1] + x
se1 <- sum((y - yhat1)^2)
yhat2 <- fit$coefficients[1] + fit$coefficients[2] * x
se2 <- sum((y - yhat2)^2)
ratio <- se2 / se1
ratio
x
summary(fit)
ss <- anova(fit)
ss
summary(ss)
fit
View(ss)
=847/278
847/278
847.7252/278.3219
278.3219/847.7252
ss$"Sum Sq"
ss$"Sum Sq"[1]
ss$"Sum Sq"[1]/(ss$"Sum Sq"[1]+ss$"Sum Sq"[2])
library(datasets)
mtdata <- data(mtcars)
library(datasets)
data(mtcars)
library(datasets)
data(mtcars)
View(mtcars)
summary(mtcars)
mpg <- mtcars$mpg
am <- mtcars$am
plot(x=am, y=mpg)
plot(y=am, x=mpg)
factor(am, levels=c("automatic","manual")
factor(am, levels=c("automatic","manual"))
factor(am, labels=c("automatic","manual"))
am <- factor(am, labels=c("automatic","manual"))
am
lm(mpg~am)
summary(lm(mpg~am))
plot(lm(mpg~am))
plot(lm(mpg~am))
plot(mpg, am)
plot(am,mpg)
plot(am, mpg, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon", pch=19)
am.auto <-subset(factor(mtcars$am, labels=c("automatic","manual"), am="automatic")
am.auto <-subset(factor(mtcars$am, labels=c("automatic","manual"), am="automatic"))
am.auto <-subset(factor(mtcars$am, labels=c("automatic","manual")), am="automatic")
am.auto <-subset(mtcars, am="automatic")
View(am.auto)
mpg.auto <-subset(factor(mtcars, labels=c("automatic","manual"), am="automatic")
mpg.auto <-subset(factor(mtcars, labels=c("automatic","manual"), am="automatic"))
mpg.auto <-subset(factor(mtcars, labels=c("automatic","manual"), am="automatic"))
mpg.auto <-subset(factor(mtcars, labels=c("automatic","manual"), mtcars$am="automatic"))
mpg.auto <-subset(factor(mtcars, mtcars$am="0"))
mpg.auto <-subset(factor(mtcars, am="0"))
mpg.auto <-subset(factor(mtcars, am=="0"))
mpg.transmission <-subset(factor(mtcars, select=mpg,am))
mpg.transmission <-subset(factor(mtcars, select=mpg:am))
mpg.transmission <-subset(factor(mtcars, select=c(mpg:am)))
library(datasets)
data(mtcars)
mpg.transmission <-subset(factor(mtcars, select=c(mpg:am)))
mpg.transmission <-subset(factor(mtcars, am="0",select=c(mpg:am)))
mpg.transmission <-subset(mtcars, am="0",select=c(mpg:am))
View(mpg.transmission)
mpg.transmission <-subset(mtcars, am=0,select=c(mpg:am))
View(mpg.transmission)
mpg.automatic <-subset(mtcars, am=0,select=c(mpg:am))
mpg.automatic <-subset(mtcars, am=0,select=c(mpg,am))
View(mpg.automatic)
mpg.automatic <-subset(mtcars, am==0,select=c(mpg,am))
View(mpg.automatic)
mpg.manual <-subset(mtcars, am==1,select=c(mpg,am))
View(mpg.manual)
x.m <- mpg.manual$am
y.m <- mpg.manual$mpg
plot(x.m, y.m)
lm(y.m~x.m)
summary(lm(y.m~x.m))
plot(lm(y.m~x.m))
x <- mtcars$am
y <- mtcars$mpg
plot(x,y)
plot(y,x)
plot(x, y, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon")
boxplot(x, y, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon")
mpg.auto <-factor(mtcars$am, labels=c("automatic","manual"))
am <-factor(mtcars$am, labels=c("automatic","manual"))
mpg <- mtcars$mpg
am <-factor(mtcars$am, labels=c("automatic","manual"))
plot(am, mpg, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon")
summary(mtcars)
boxplot(am, mpg, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon")
plot(am, mpg, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon")
str(mtcars)
help(mtcars)
x <- help(mtcars)
x
boxplot(mpg~a)
boxplot(mpg~am)
boxplot(mpg~am, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon")
boxplot(mpg~am, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon", fill=c("yellow","orange"))
library(datasets)
data(mtcars)
mtcars$am <- factor(mtcars$am, labels= c("automatic","manual"))
manual <- subset(mtcars, am=='manual', select=c(mpg,cyl,am))
auto <- subset(mtcars, am=='automatic', select=c(mpg,cyl,am))
par(mfrow=c(1,2), oma = c(0,0,2,0))
plot(y=manual$mpg, x=manual$cyl, ylab="MPG", xlab="# Cylinders")
plot(y=auto$mpg, x=auto$cyl, ylab="MPG", xlab="# Cylinders")
mtext("MPG By Cylinder", outer = TRUE, cex = 1.5)
plot(mtcars$mpg~cyl)
plot(mtcars$mpg~mtcars$cyl)
plot(mtcars)
initialmodel <- lm(mpg ~ ., data = mtcars)
step(initialmodel, direction = "both")
lm(mpg ~ ., data = mtcars)
pairs(mtcars)
pairs(mpg~ .)
pairs(mpg~ ., data=mtcars)
pairs(mpg~ am+wt+cyl+disp, data=mtcars)
pairs(mtcars)
summary(lm(mpg~., data=mtcars))
shapiro.test(mtcars$mpg[mtcars$am=="automatic"])
mtcars$mpg[mtcars$am=="automatic"]
library(datasets)
data(mtcars)
mtcars$am <-factor(mtcars$am,
labels=c("automatic","manual"))
mpg <- mtcars$mpg
am <- mtcars$am
mean.auto <- mean(mtcars$mpg[mtcars$am=="automatic"])
sd.auto <- sd(mtcars$mpg[mtcars$am=="automatic"])
mean.manual <- mean(mtcars$mpg[mtcars$am=="manual"])
sd.manual <- sd(mtcars$mpg[mtcars$am=="manual"])
var.manual <- var(mtcars$mpg[mtcars$am=="manual"])
var.auto <- var(mtcars$mpg[mtcars$am=="automatic"])
shapiro.test(mtcars$mpg[mtcars$am=="automatic"])
shapiro.test(mtcars$mpg[mtcars$am=="manual"])
dnorm(x, mean=0, sd=1)
dnorm(mtcars$mpg[mtcars$am == "manual"], mean=0, sd=1)
qqnorm(mtcars$mpg[mtcars$am == "manual"])
qqline(mtcars$mpg[mtcars$am == "manual"])
qqplot(mtcars$mpg[mtcars$am == "manual"])
qqplot(y=mtcars$mpg[mtcars$am == "manual"])
qqplot(y=mtcars$mpg[mtcars$am == "manual"], x=mtcars$am[mtcars$am="manual"])
qqplot(y=mtcars$mpg[mtcars$am == "manual"], x=mtcars$am[mtcars$am=="manual"])
shapiro.test(mpg.manual)
shapiro.test(mpg.auto)
mpg.manual <- mtcars$mpg[mtcars$am=="manual"]
mpg.auto <- tcars$mpg[mtcars$am=="automatic"]
mpg.manual <- mtcars$mpg[mtcars$am=="manual"]
mpg.auto <- mtcars$mpg[mtcars$am=="automatic"]
shapiro.test(mpg.manual)
shapiro.test(mpg.auto)
shapiro.manual <- shapiro.test(mpg.manual)
shapiro.auto <- shapiro.test(mpg.auto)
shapiro.manual$p.value
hatvalues(mtcars)
hatvalues(lm(mpg~am)
)
hatvalues(lm(mpg~.))
hatvalues(lm(mpg~., data=mgcars))
hatvalues(lm(mpg~., data=mtcars))
summary(hatvalues(lm(mpg~., data=mtcars)))
fit <- lm(hp ~ cyl + mpg, data=mtcars) #a fake model
hatvalues(fit)
fit <- lm(mpg~am, data=mtcars) #a fake model
hatvalues(fit)
lm(mpg.manual)
am[am=="manual"]
mpg
fit <- lm(mpg~am, data=mtcars[am=="manual"]) #a fake model
hatvalues(fit)
fit <- lm(mpg~am, data=mtcars[am=="manual"]) #a fake model
plot(hatvalues(fit))
fit <- lm(mpg~am, data=mtcars[am=="manual"]) #a fake model
hist(hatvalues(fit))
fit <- lm(mpg~am, data=mtcars[am=="manual"]) #a fake model
density(hatvalues(fit))
fit <- lm(mpg~am, data=mtcars[am=="manual"]) #a fake model
plot(hatvalues(fit))
fit <- lm(mpg~am, data=mtcars[am=="manual"]) #a fake model
plot(hatvalues(fit), type="h")
lm(mpg ~ ., data = mtcars)
initialmodel <- lm(mpg ~ ., data = mtcars)
bestmodel <- step(initialmodel, direction = "both")
lm(mpg ~ ., data = mtcars)
dfbetas(fit)
dfbetas(lm(mpg~., data=mtcars))
fit <- lm(mpg~., data=mtcars)
coef(fit)
confint(fit)
fit <- lm(mpg~., data=mtcars)
confint(fit)
coef(fit)
summary(coef(fit))
fit
lm(mpg~., data=mtcars)
fitted(fit)
fit
fit$p.value
summary(fit)
summary(fit)$coef
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel) # results hidden
stepModel <- step(fit, k=log(nrow(mtcars)))
summary(stepModel) # results hidden
pairs(fit)
pairs(mpg~am)
pairs(mpg~.)
pairs(mtcars)
fit <- lm(mpg~am)
base <- lm(mpg~.)
summary(pairs(mtcars))
best.model <- step(fit,k=nrow(mtcars))
fit <- lm(mpg~.)
fit <- lm(mpg~., data=mtcars)
best.model <- step(fit,k=nrow(mtcars))
best.model <- step(fit)
best.model$anova
summary(best.model)
am.wt <- summary(lm(formula = mpg ~ wt + qsec + am + am:wt, data = mtcars))$coef[5,4]
am.qsec <- summary(lm(formula = mpg ~ wt + qsec + am + am:qsec, data = mtcars))$coef[5,4]
qsec.wt <- summary(lm(formula = mpg ~ wt + qsec + am + qsec:wt, data = mtcars))$coef[5,4]
best.fit.model <- lm(formula = mpg ~ wt + qsec + am + am:wt, data = mtcars)
inter <- c("am.wt","am.qsec","qsec.wt")
inter.coef <- c(am.wt, am.qsec,qsec.wt)
data.frame(inter, inter.coef)
am:wt <- summary(lm(formula = mpg ~ wt + qsec + am + am:wt, data = mtcars))$coef[5,4]
am:qsec <- summary(lm(formula = mpg ~ wt + qsec + am + am:qsec, data = mtcars))$coef[5,4]
qsec:wt <- summary(lm(formula = mpg ~ wt + qsec + am + qsec:wt, data = mtcars))$coef[5,4]
best.fit.model <- lm(formula = mpg ~ wt + qsec + am + am:wt, data = mtcars)
interaction <- c("am:wt","am:qsec","qsec:wt")
inter.coef <- c(am.wt, am.qsec,qsec.wt)
data.frame(inter, inter.coef)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
View(train)
View(adData)
View(training)
View(testing)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
View(testing)
View(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("Hmisc")
View(training)
training$index <- seq(1, nrow(training))
require(reshape2)
D <- melt(training, id.var=c("index"))
ggplot(D, aes(x=index, y=value, color=variable)) +
geom_point(alpha=1/2) +
geom_smooth(alpha=1/2) +
facet_wrap(~ variable, nrow=3, scales="free_y") +
theme(legend.position="none")
View(D)
fit <- lm(CompressiveStrength~., concrete)
summary(fit)
plot(fit)
fit2 <- lm(CompressiveStrength~Cement+BlastFurnaceSlag+FlyAsh+Superplasticizer+Age, concrete)
summary(fit2)
fit2 <- lm(CompressiveStrength~Cement+BlastFurnaceSlag+FlyAsh+Age, concrete)
summary(fit2)
library(gridExtra)
library(Hmisc)
names(training)
summary(training)
age <- cut2(training$Age,g=10)
flyash <- cut2(training$FlyAsh,g=10)
byAge <- qplot(seq(1,nrow(training)),CompressiveStrength,data=training,col=age)
byFlyAsh <- qplot(seq(1,nrow(training)),CompressiveStrength,data=training,col=flyash)
grid.arrange(byAge,byFlyAsh)
qplot(CompressiveStrength, Cement, data=concrete)
index<-colnames(concrete[,c(1,2,3,4,5,6,7)])
featurePlot(x=training[,index], y=training$CompressiveStrength, plot="pairs")
plot(CompressiveStrength, inTrain)
plot(CompressiveStrength, inTrain, data=concrete)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
Show(inTrain)
View(inTrain)
View(mixtures)
View(concrete)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
plot(training$CompressiveStrength, row.names )
plot(training$CompressiveStrength, training$row.names )
plot(training$CompressiveStrength, training$row.names, colour=names(training) )
qplot(training$CompressiveStrength, training$row.names, colour=names(training) )
qplot(training$CompressiveStrength, training$row.names, aes=colour(names(training)))
qplot(training$CompressiveStrength, training$row.names, aes=color(names(training)))
qplot(training$CompressiveStrength, training$row.names)
plot(training$CompressiveStrength, training$row.names)
plot(training$CompressiveStrength, training$row.names, color=cut2(training(,each[i])))
plot(training$CompressiveStrength, training$row.names, color=cut2(training][,each[i]]))
plot(training$CompressiveStrength, training$row.names, color=cut2(training[,each[i]]))
plot(training$CompressiveStrength, training$row.names, color=colnames(training))
qplot(training$CompressiveStrength, training$row.names, color=colnames(training))
plot(training$CompressiveStrength, training$row.names, color=colnames(training))
colnames(training)
plot(training$CompressiveStrength, training$row.names, col=colnames(training))
plot(training$CompressiveStrength, training$row.names, col=training$Cement)
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
plot(training$CompressiveStrength, training$row.names, color=index)
plot(training$CompressiveStrength, training$row.names, col=c(colnames(training)))
plot(training$CompressiveStrength, training$row.names, col="blue")
summary(train)
summary(training)
head(training)
str(training)
plot(training$CompressiveStrength, training$row.names, col=c("blue","red","orange")
plot(training$CompressiveStrength, training$row.names, col=c("blue","red","orange"))
plot(training$CompressiveStrength, training$row.names, col=c("blue","red","orange"))
plot(training$CompressiveStrength, training$row.names, col=index
)
plot(training$CompressiveStrength, training$row.names, col=names(training))
names(training)
View(training)
test <- cut2(training, nrow(training))
test <- cut2(training$CompressiveStrength, nrow(training))
View(test)
test <- cut2(training$CompressiveStrength, 5)
View(test)
test <- cut2(training$CompressiveStrength, nrow(training)/5)
View(test)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
clear
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- subset(training, colnames(training) %like% "^IL")
trainingIL <- subset(training, grep("^IL",colnames(training)))
trainingIL <- training[,grep("^IL",colnames(training))]
View(trainingIL)
preProc <- preProcess(training[, trainingIL], method = "pca", thresh = 0.8)
preProc <- preProcess(training[, as.list(trainingIL)], method = "pca", thresh = 0.8)
trainingIL
trainingIL <- grep("^IL",colnames(training))
preProc <- preProcess(training[, as.list(trainingIL)], method = "pca", thresh = 0.8)
preProc <- preProcess(training[,trainingIL], method = "pca", thresh = 0.8)
preProc$roation
preProc$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- grep("^IL",training)
trainingIL <- grep("^IL",colnames(training))
preProc <- preProcess(training[,trainingIL], method = "pca", thresh = 0.8)
View(predictors)
View(diagnosis)
dfIL <- data.frame(diagnosis, predictors)
View(dfIL)
dfIL <- data.frame(diagnosis, predictors[,grep("^IL",colnames(predictors))])
View(dfIL)
inTrainFit = createDataPartition(dfIL$diagnosis, p = 3/4)[[1]]
trainingFit = df[inTrainFit, ]
testingFit = df[-inTrainFit, ]
inTrainFit <- createDataPartition(dfIL$diagnosis, p = 3/4)[[1]]
trainingFit <- df[inTrainFit, ]
testingFit <- df[-inTrainFit, ]
inTrainFit <- createDataPartition(dfIL$diagnosis, p = 3/4)[[1]]
trainingFit <- dfIL[inTrainFit, ]
testingFit <- dfIL[-inTrainFit, ]
fit <- train(diagnosis~., data=trainingFit, model="glm")
library(caret)
install.packages("randomForest")
fit <- train(diagnosis~., data=trainingFit, model="glm")
library(caret)
fit <- train(diagnosis~., data=trainingFit, model="glm")
fit <- train(diagnosis~., data=trainingFit, method="glm")
install.packages("e1071")
fit <- train(diagnosis~., data=trainingFit, method="glm")
predictions <- predict(Fit, newdata = testingFit)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testingFit$diagnosis)
print(C1)
predictions <- predict(fit, newdata = testingFit)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testingFit$diagnosis)
print(C1)
fitPCA <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(fitPCA, testing))
print(C2)
C1$overall[1]
C2$overall[1]
fitPCA <- train(trainingIL$diagnosis ~ ., method = "glm", preProcess = "pca",
data = trainingIL, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(fitPCA, testing))
print(C2)
fitPCA <- train(trainingFit$diagnosis ~ ., method = "glm", preProcess = "pca",
data = trainingFit, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testingFit$diagnosis, predict(fitPCA, testingFit))
print(C2)
C2$overall[1]
setwd("~/Documents/Coursera/Machine Learning")
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
if(!file.exists("./har.csv")){
download.file(url,"./har.csv")
}
har <- read.csv("./har.csv")
```
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
if(!file.exists("./har.csv")){
download.file(url,"./har.csv")
}
har <- read.csv("./har.csv")
```
